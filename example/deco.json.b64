{
    "filters": {
        "example/conf/example.txt": {
            "helloWorld": "Hello World!",
            "base64String": "SGVsbG8gV29ybGQ=",
            "longBase64EncodedString": "PHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gRnVzY2Ugc2VkIG1pIGEgb2RpbyBwaGFyZXRyYSBtb2xsaXMuIE1hdXJpcyBpbXBlcmRpZXQsIHJpc3VzIGlkIG1hdHRpcyBzb2RhbGVzLCByaXN1cyBzZW0gdmVuZW5hdGlzIG1pLCBpbiB0ZW1wb3IgZWxpdCByaXN1cyBlZ2V0IGF1Z3VlLiBNb3JiaSBydXRydW0gZXVpc21vZCBtYXVyaXMsIGluIGltcGVyZGlldCB0b3J0b3IgdHJpc3RpcXVlIGEuIE1hZWNlbmFzIHVsdHJpY2VzIGR1aSBpZCBjdXJzdXMgZnJpbmdpbGxhLiBOYW0gbGFvcmVldCwgYXVndWUgcHJldGl1bSB1bHRyaWNlcyB0ZW1wb3IsIG1hZ25hIG1hdXJpcyBlZ2VzdGFzIGV4LCBub24gdHJpc3RpcXVlIGxlY3R1cyB1cm5hIGF0IG1hZ25hLiBNYWVjZW5hcyBmZXVnaWF0IGVsaXQgdml0YWUgbmVxdWUgY3Vyc3VzIGNvbnNlY3RldHVyLiBBZW5lYW4gZXUgYWxpcXVldCBhbnRlLCBzZWQgc3VzY2lwaXQgbWkuIE51bGxhbSB2YXJpdXMgdmVsIG5lcXVlIGluIHNhZ2l0dGlzLiBEb25lYyBpZCBkaWFtIHZlaGljdWxhLCBsYWNpbmlhIG5pYmggbmVjLCBtYXhpbXVzIHRvcnRvci4gTW9yYmkgaWQgbG9yZW0gdHVycGlzLiBNb3JiaSBmZXJtZW50dW0gYWMgcmlzdXMgcXVpcyBibGFuZGl0LiBOdWxsYSBhY2N1bXNhbiwgbmlzbCBhIHBoYXJldHJhIHBlbGxlbnRlc3F1ZSwgYXJjdSBtYXNzYSBhbGlxdWV0IHNhcGllbiwgc2VkIHRyaXN0aXF1ZSBsZWN0dXMgc2VtIHZlbCBvZGlvLiBJbnRlZ2VyIHVsbGFtY29ycGVyIGZhY2lsaXNpcyBtYXNzYSB2aXRhZSBzdXNjaXBpdC48L3A+IA0KPHA+UXVpc3F1ZSBjb25zZXF1YXQgZXJvcyBlZ2V0IGF1Z3VlIGNvbW1vZG8gY3Vyc3VzLiBJbiB0cmlzdGlxdWUgZmluaWJ1cyBjb252YWxsaXMuIFNlZCBtYXR0aXMgdHJpc3RpcXVlIGVzdCBlZ2V0IGlhY3VsaXMuIE1hZWNlbmFzIGx1Y3R1cyBlZ2VzdGFzIGxhY3VzIG5vbiBlbGVtZW50dW0uIEZ1c2NlIGVnZXN0YXMsIGR1aSBzaXQgYW1ldCBzdXNjaXBpdCBwdWx2aW5hciwgbG9yZW0gbnVuYyBtYWxlc3VhZGEgZXJvcywgZWdldCBjb25zZWN0ZXR1ciBlcm9zIG5pc2kgdXQgbWF1cmlzLiBDdXJhYml0dXIgcGxhY2VyYXQgcG9ydGEgcG9ydHRpdG9yLiBOYW0gYWMgbWFnbmEgc2VkIGp1c3RvIGVnZXN0YXMgcmhvbmN1cyBpZCBzZWQgbGlndWxhLiBDcmFzIGdyYXZpZGEgdGVsbHVzIHN1c2NpcGl0IG5lcXVlIHZlaGljdWxhIHBvcnRhLjwvcD4gDQo8cD5TZWQgbGFvcmVldCBsb3JlbSBldCBzZW1wZXIgdWx0cmljaWVzLiBRdWlzcXVlIHJpc3VzIHRlbGx1cywgc2VtcGVyIGEgYmliZW5kdW0gaWQsIGNvbmd1ZSBuZWMgbmlzbC4gVmVzdGlidWx1bSB2ZWwgbGliZXJvIGlkIGVuaW0gdGluY2lkdW50IHZpdmVycmEuIFF1aXNxdWUgcGVsbGVudGVzcXVlIHVsdHJpY2VzIG5pYmggc2l0IGFtZXQgbGFjaW5pYS4gSW4gYXQgbnVsbGEganVzdG8uIE51bGxhbSBzaXQgYW1ldCBhY2N1bXNhbiBzZW0sIHV0IGVmZmljaXR1ciBsb3JlbS4gUHJvaW4gc2VtcGVyIHVybmEgZWdldCBwaGFyZXRyYSBlbGVpZmVuZC4gTWFlY2VuYXMgZWZmaWNpdHVyIHNjZWxlcmlzcXVlIHNjZWxlcmlzcXVlLiBOYW0gcGhhcmV0cmEgZW5pbSBhdCBpbnRlcmR1bSB2dWxwdXRhdGUuIFZlc3RpYnVsdW0gcHVsdmluYXIgZG9sb3IgbmVjIGxhY3VzIGRhcGlidXMsIG5vbiBjb25kaW1lbnR1bSBhcmN1IGZhdWNpYnVzLjwvcD4gDQo8cD5VdCBtYXNzYSBtYXNzYSwgb3JuYXJlIHZpdmVycmEgaWFjdWxpcyBzZWQsIGN1cnN1cyBlbGVpZmVuZCBpcHN1bS4gU3VzcGVuZGlzc2Ugb3JuYXJlIG1hZ25hIGlwc3VtLCBzZWQgc2VtcGVyIHRlbGx1cyBlZ2VzdGFzIGEuIFByb2luIHNpdCBhbWV0IGFjY3Vtc2FuIGxlby4gTWF1cmlzIGxhY2luaWEsIG51bmMgaW4gdmVoaWN1bGEgaW50ZXJkdW0sIGVzdCBtaSB2b2x1dHBhdCBlc3QsIGludGVyZHVtIGZpbmlidXMgYW50ZSBuaXNsIHZlbCBsaWd1bGEuIFZpdmFtdXMgbGFjaW5pYSBlbmltIGF0IHNhcGllbiB1bGxhbWNvcnBlciB2YXJpdXMuIFNlZCBpbiB2ZXN0aWJ1bHVtIGR1aS4gRHVpcyBsb3JlbSBkdWksIHVsdHJpY2llcyBhdCBuaXNpIHNpdCBhbWV0LCB2dWxwdXRhdGUgYmxhbmRpdCBsYWN1cy4gTW9yYmkgc2l0IGFtZXQgZWxpdCBvZGlvLiBJbiBlZmZpY2l0dXIgZWxpdCBxdWlzIG1pIG1heGltdXMgc2VtcGVyIGluIGlkIG1hZ25hLiBQcm9pbiBldSBzdXNjaXBpdCB0ZWxsdXMsIGF0IG1vbGVzdGllIHRvcnRvci48L3A+IA0KPHA+Q3JhcyBtYXhpbXVzIGV4IG5vbiBqdXN0byBiaWJlbmR1bSwgcnV0cnVtIHBoYXJldHJhIGFyY3UgcHJldGl1bS4gUGhhc2VsbHVzIGxhY2luaWEgdWx0cmljaWVzIGxpZ3VsYSBldSBhbGlxdWV0LiBOdWxsYSBldSBsYWN1cyB0b3J0b3IuIE51bGxhbSBncmF2aWRhLCBlbmltIHV0IHZ1bHB1dGF0ZSBsYW9yZWV0LCBkdWkgbmliaCB0aW5jaWR1bnQgdXJuYSwgdmVsIHBlbGxlbnRlc3F1ZSBleCBsaWd1bGEgZGFwaWJ1cyBhdWd1ZS4gRHVpcyBwb3J0YSwgbGlndWxhIG5lYyBtYWxlc3VhZGEgdWx0cmljZXMsIGVsaXQgbWkgZWxlaWZlbmQgYW50ZSwgYWMgaGVuZHJlcml0IGp1c3RvIHRvcnRvciBuZWMgbnVuYy4gVml2YW11cyBldCB2ZWxpdCB2ZWwgc2VtIHNvbGxpY2l0dWRpbiB2ZXN0aWJ1bHVtIGlkIGlkIGV4LiBQaGFzZWxsdXMgZG9sb3IgbGliZXJvLCB2aXZlcnJhIHBlbGxlbnRlc3F1ZSB1cm5hIGV1LCBydXRydW0gYWxpcXVldCBuaXNsLiBEdWlzIGZhdWNpYnVzIHRvcnRvciBhcmN1LiBVdCBwZWxsZW50ZXNxdWUgZGlhbSBhdCBsZWN0dXMgZmF1Y2lidXMgbWF0dGlzLiBQZWxsZW50ZXNxdWUgYWxpcXVhbSBpbiBhbnRlIGVnZXQgc2FnaXR0aXMuPC9wPiANCg==",
            "conditionallyDoAThing": "true",
            "conditionallyDontDoAThing": "false"
        },
        "example/conf/server.xml": {
            "httpPort": "8080",
            "httpsPort": "8443",
            "redirectPort": "8443"
        },
        "example/conf/context.xml": {
            "disableSessionPersist": "true"
        }
    }
}